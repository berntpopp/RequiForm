import{_ as K,a0 as Q,C as w,d as k,r as V,x as W,D as X,E as B,Q as o,v as C,R as L,G as d,A as s,z as v,H as r,i as Y,J as P,T as y,B as h,a1 as Z,I as x,a2 as ee,F as j,a3 as N,a4 as te,a5 as ae,a6 as f,a7 as D,a8 as ne}from"./index.BOhBcDCI.js";const oe={class:"phenotype-selector"},le={key:0,class:"phenotype-panel"},se={key:0},re={class:"phenotype-info"},de={class:"hpo"},ie={class:"description"},ue={key:1},pe={__name:"PhenotypeSelector",props:{groupedPanelDetails:{type:Array,required:!0},modelValue:{type:Object,default:()=>({})}},emits:["update:modelValue","panel-state-change"],setup(O,{emit:F}){Q(e=>({f6a39b5a:h(ae).styles.phenotypeSelectorBackgroundColor}));const{t:g}=w(),U=w(),b=k(()=>U.locale.value),i=V(0),S=()=>{i.value++,o.debug("PhenotypeSelector: Language updated, refreshing component")};W(()=>{window.addEventListener("i18n-updated",S),window.addEventListener("i18n-locale-changed",S)}),X(()=>{window.removeEventListener("i18n-updated",S),window.removeEventListener("i18n-locale-changed",S)});const E=O,I=F,u=B("patientData",null),m=B("updatePhenotypeData",null),p=V(!1),n=V({}),A=k(()=>{if(!n.value||Object.keys(n.value).length===0)return!0;for(const e in n.value){const a=n.value[e];for(const t in a)if(a[t]==="present"||a[t]==="absent")return!1}return!0});u&&u.phenotypeData&&u.phenotypeData.length>0&&(o.debug("PhenotypeSelector: initializing from unified data model with",u.phenotypeData.length,"phenotype items"),o.debug("PhenotypeSelector: phenotype data items:",u.phenotypeData),u.phenotypeData.forEach(e=>{o.debug("PhenotypeSelector: processing phenotype item:",e),n.value[e.categoryId]||(o.debug("PhenotypeSelector: creating new category map for",e.categoryId),n.value[e.categoryId]={}),n.value[e.categoryId][e.phenotypeId]=e.status,o.debug(`PhenotypeSelector: set ${e.phenotypeId} to ${e.status} in category ${e.categoryId}`)}),o.debug("PhenotypeSelector: finished initialization, localPhenotypeData =",n.value)),C(()=>E.groupedPanelDetails,e=>{e.forEach(a=>{if(!n.value[a.id]){const t=L.categories.find(l=>l.id===a.id);if(t&&t.phenotypes&&t.phenotypes.length){const l={};t.phenotypes.forEach(c=>{l[c.id]="no input"}),n.value[a.id]=l}}}),$()},{immediate:!0,deep:!0}),C(()=>u?.phenotypeData,e=>{if(o.debug("PhenotypeSelector: watching unified phenotype data -",e?.length||0,"items"),e&&e.length>0){if(o.debug("PhenotypeSelector: Found phenotype data in unified model:",e),e.length===1&&!e[0].categoryId&&!e[0].phenotypeId){o.debug("PhenotypeSelector: Detected direct format phenotype data");const t=u?.category||"nephrology";n.value[t]||(o.debug(`PhenotypeSelector: Creating category ${t} for direct format data`),n.value[t]={}),Object.entries(e[0]).forEach(([l,c])=>{n.value[t][l]=c,o.debug(`PhenotypeSelector: Set direct format ${l} = ${c} in ${t}`)})}else e.forEach(t=>{t.categoryId&&t.phenotypeId&&t.status?(n.value[t.categoryId]||(o.debug(`PhenotypeSelector: Creating category ${t.categoryId}`),n.value[t.categoryId]={}),n.value[t.categoryId][t.phenotypeId]=t.status,o.debug(`PhenotypeSelector: Set ${t.phenotypeId} = ${t.status} in ${t.categoryId}`)):o.warn("PhenotypeSelector: Invalid phenotype item:",t)});n.value={...n.value},o.debug("PhenotypeSelector: Updated phenotype data:",n.value),p.value=!0,o.debug("PhenotypeSelector: Opening panel to show phenotype data")}},{immediate:!0,deep:!0});function T(){const e=p.value;p.value=!p.value,e&&(o.debug("PhenotypeSelector: Clearing phenotype data as panel is being hidden"),z()),I("panel-state-change",p.value)}function z(){m&&m([]),n.value={},$()}function M(e,a){return n.value[e]||(n.value[e]={}),n.value[e][a]||"no input"}function R(e,a,t){n.value[e]||(n.value[e]={}),n.value[e][a]=t,H()}function _(e){return L.categories.find(t=>t.id===e)?.phenotypes||[]}function G(e){return e.names&&e.names[b.value]?e.names[b.value]:e.name}function q(e){return e.descriptions&&e.descriptions[b.value]?e.descriptions[b.value]:e.description}function H(){$()}function $(){if(I("update:modelValue",n.value),m){const e=[];Object.entries(n.value).forEach(([a,t])=>{Object.entries(t).forEach(([l,c])=>{e.push({categoryId:a,phenotypeId:l,status:c})})}),m(e),I("panel-state-change",p.value)}}const J=k(()=>E.groupedPanelDetails);return(e,a)=>(s(),d("div",oe,[(s(),v(Z,{color:"primary",small:"",onClick:T,key:`toggle-btn-${i.value}`},{default:P(()=>[r(y(h(g)(p.value?"phenotypeSelector.toggleButton.hide":"phenotypeSelector.toggleButton.add")),1)]),_:1})),a[7]||(a[7]=r()),Y(te,null,{default:P(()=>[p.value?(s(),d("div",le,[A.value?(s(),v(ee,{type:"warning",density:"compact",variant:"tonal",class:"warning-alert",key:`warning-alert-${i.value}`},{default:P(()=>[r(y(h(g)("phenotypeSelector.warnings.noneSelected")),1)]),_:1})):x("",!0),a[6]||(a[6]=r()),(s(!0),d(j,null,N(J.value,t=>(s(),d("div",{key:t.id,class:"category-section"},[f("h3",null,y(t.categoryTitle),1),a[5]||(a[5]=r()),_(t.id)?.length?(s(),d("div",se,[(s(!0),d(j,null,N(_(t.id),l=>(s(),d("div",{key:l.id,class:"phenotype-item"},[f("div",re,[f("strong",null,y(G(l)),1),a[0]||(a[0]=r()),f("span",de,"("+y(l.hpo)+")",1),a[1]||(a[1]=r()),f("p",ie,y(q(l)),1)]),a[4]||(a[4]=r()),(s(),v(ne,{"model-value":M(t.id,l.id),"onUpdate:modelValue":c=>R(t.id,l.id,c),inline:"",density:"compact",class:"radio-group",key:`radio-group-${t.id}-${l.id}-${i.value}`},{default:P(()=>[(s(),v(D,{label:h(g)("phenotypeSelector.radioLabels.noInput"),value:"no input",density:"compact",key:`radio-no-input-${i.value}`},null,8,["label"])),a[2]||(a[2]=r()),(s(),v(D,{label:h(g)("phenotypeSelector.radioLabels.present"),value:"present",density:"compact",key:`radio-present-${i.value}`},null,8,["label"])),a[3]||(a[3]=r()),(s(),v(D,{label:h(g)("phenotypeSelector.radioLabels.absent"),value:"absent",density:"compact",key:`radio-absent-${i.value}`},null,8,["label"]))]),_:2},1032,["model-value","onUpdate:modelValue"]))]))),128))])):(s(),d("div",ue,[(s(),d("p",{key:`no-phenotypes-${t.id}-${i.value}`},y(h(g)("phenotypeSelector.noPhenotypesMessage")),1))]))]))),128))])):x("",!0)]),_:1})]))}},ye=K(pe,[["__scopeId","data-v-ac2fe6c0"]]);export{ye as default};
