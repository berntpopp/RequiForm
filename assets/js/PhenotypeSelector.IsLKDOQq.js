import{_ as e,l as t,t as a,b as o}from"./index.CgV39vRC.js";import{aa as n,Z as l,c as p,b as d,H as i,x as s,d as r,o as u,a8 as c,$ as y,_ as h,R as g,j as v,a0 as m,N as f,u as b,a2 as S,F as P,ab as I,a1 as $}from"./vendor-vue.MuR-ak5S.js";import{e as k,E as w,F as D,G as E}from"./vendor-vuetify-core.BS_X3kim.js";import"./vendor-pdf.CZcEIuwn.js";/* empty css                     */const j={class:"phenotype-selector"},_={key:0,class:"phenotype-panel"},L={key:0},V={class:"phenotype-info"},C={class:"hpo"},O={class:"description"},x={key:1},B=e({__name:"PhenotypeSelector",props:{groupedPanelDetails:{type:Array,required:!0},modelValue:{type:Object,default:()=>({})}},emits:["update:modelValue"],setup(e,{emit:B}){n((e=>({"1855888c":b(o).styles.phenotypeSelectorBackgroundColor})));const{t:F}=l(),U=l(),z=p((()=>U.locale.value)),T=d(0),q=()=>{T.value++,t.debug("PhenotypeSelector: Language updated, refreshing component")};i((()=>{window.addEventListener("i18n-updated",q),window.addEventListener("i18n-locale-changed",q)})),s((()=>{window.removeEventListener("i18n-updated",q),window.removeEventListener("i18n-locale-changed",q)}));const A=e,G=B,H=r("patientData",null),M=r("updatePhenotypeData",null),N=d(!1),R=d({});function Z(){N.value=!N.value}function J(e){const t=a.categories.find((t=>t.id===e));return(null==t?void 0:t.phenotypes)||[]}function K(e){return e.names&&e.names[z.value]?e.names[z.value]:e.name}function Q(e){return e.descriptions&&e.descriptions[z.value]?e.descriptions[z.value]:e.description}function W(){if(G("update:modelValue",R.value),M){const e=[];Object.entries(R.value).forEach((([t,a])=>{Object.entries(a).forEach((([a,o])=>{e.push({categoryId:t,phenotypeId:a,status:o})}))})),M(e)}}H&&H.phenotypeData&&H.phenotypeData.length>0&&(t.debug("PhenotypeSelector: initializing from unified data model with",H.phenotypeData.length,"phenotype items"),t.debug("PhenotypeSelector: phenotype data items:",H.phenotypeData),H.phenotypeData.forEach((e=>{t.debug("PhenotypeSelector: processing phenotype item:",e),R.value[e.categoryId]||(t.debug("PhenotypeSelector: creating new category map for",e.categoryId),R.value[e.categoryId]={}),R.value[e.categoryId][e.phenotypeId]=e.status,t.debug(`PhenotypeSelector: set ${e.phenotypeId} to ${e.status} in category ${e.categoryId}`)})),t.debug("PhenotypeSelector: finished initialization, localPhenotypeData =",R.value)),u((()=>A.groupedPanelDetails),(e=>{e.forEach((e=>{if(!R.value[e.id]){const t=a.categories.find((t=>t.id===e.id));if(t&&t.phenotypes&&t.phenotypes.length){const a={};t.phenotypes.forEach((e=>{a[e.id]="no input"})),R.value[e.id]=a}}})),W()}),{immediate:!0,deep:!0}),u((()=>null==H?void 0:H.phenotypeData),(e=>{if(t.debug("PhenotypeSelector: watching unified phenotype data -",(null==e?void 0:e.length)||0,"items"),e&&e.length>0){if(t.debug("PhenotypeSelector: Found phenotype data in unified model:",e),1!==e.length||e[0].categoryId||e[0].phenotypeId)e.forEach((e=>{e.categoryId&&e.phenotypeId&&e.status?(R.value[e.categoryId]||(t.debug(`PhenotypeSelector: Creating category ${e.categoryId}`),R.value[e.categoryId]={}),R.value[e.categoryId][e.phenotypeId]=e.status,t.debug(`PhenotypeSelector: Set ${e.phenotypeId} = ${e.status} in ${e.categoryId}`)):t.warn("PhenotypeSelector: Invalid phenotype item:",e)}));else{t.debug("PhenotypeSelector: Detected direct format phenotype data");const a=(null==H?void 0:H.category)||"nephrology";R.value[a]||(t.debug(`PhenotypeSelector: Creating category ${a} for direct format data`),R.value[a]={}),Object.entries(e[0]).forEach((([e,o])=>{R.value[a][e]=o,t.debug(`PhenotypeSelector: Set direct format ${e} = ${o} in ${a}`)}))}R.value={...R.value},t.debug("PhenotypeSelector: Updated phenotype data:",R.value),N.value=!0,t.debug("PhenotypeSelector: Opening panel to show phenotype data")}}),{immediate:!0,deep:!0});const X=p((()=>A.groupedPanelDetails));return(e,t)=>(y(),c("div",j,[(y(),h(k,{color:"primary",small:"",onClick:Z,key:`toggle-btn-${T.value}`},{default:m((()=>[g(f(b(F)(N.value?"phenotypeSelector.toggleButton.hide":"phenotypeSelector.toggleButton.add")),1)])),_:1})),t[7]||(t[7]=g()),v(w,null,{default:m((()=>[N.value?(y(),c("div",_,[(y(),c("h2",{class:"title",key:`phenotype-title-${T.value}`},f(b(F)("phenotypeSelector.panelTitle")),1)),t[6]||(t[6]=g()),(y(!0),c(P,null,I(X.value,(e=>{var a;return y(),c("div",{key:e.id,class:"category-section"},[$("h3",null,f(e.categoryTitle),1),t[5]||(t[5]=g()),(null==(a=J(e.id))?void 0:a.length)?(y(),c("div",L,[(y(!0),c(P,null,I(J(e.id),(a=>(y(),c("div",{key:a.id,class:"phenotype-item"},[$("div",V,[$("strong",null,f(K(a)),1),t[0]||(t[0]=g()),$("span",C,"("+f(a.hpo)+")",1),t[1]||(t[1]=g()),$("p",O,f(Q(a)),1)]),t[4]||(t[4]=g()),(y(),h(E,{modelValue:R.value[e.id][a.id],"onUpdate:modelValue":t=>R.value[e.id][a.id]=t,inline:"",density:"compact",onChange:e=>{W()},class:"radio-group",key:`radio-group-${e.id}-${a.id}-${T.value}`},{default:m((()=>[(y(),h(D,{label:b(F)("phenotypeSelector.radioLabels.noInput"),value:"no input",density:"compact",key:`radio-no-input-${T.value}`},null,8,["label"])),t[2]||(t[2]=g()),(y(),h(D,{label:b(F)("phenotypeSelector.radioLabels.present"),value:"present",density:"compact",key:`radio-present-${T.value}`},null,8,["label"])),t[3]||(t[3]=g()),(y(),h(D,{label:b(F)("phenotypeSelector.radioLabels.absent"),value:"absent",density:"compact",key:`radio-absent-${T.value}`},null,8,["label"]))])),_:2},1032,["modelValue","onUpdate:modelValue","onChange"]))])))),128))])):(y(),c("div",x,[(y(),c("p",{key:`no-phenotypes-${e.id}-${T.value}`},f(b(F)("phenotypeSelector.noPhenotypesMessage")),1))]))])})),128))])):S("",!0)])),_:1})]))}},[["__scopeId","data-v-12faec34"]]);export{B as default};
