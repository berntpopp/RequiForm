import{E as e}from"./vendor-pdf.CZcEIuwn.js";import{Z as t,c as n,b as a,H as i,x as r,d as o,a8 as s,$ as l,_ as d,a0 as g,R as c,N as p,u}from"./vendor-vue.MuR-ak5S.js";import{l as f,t as h,c as m}from"./index.B6g_20Lx.js";import{Q as v}from"./vendor-utils.CQfLIqa1.js";import{e as y}from"./vendor-vuetify-core.BS_X3kim.js";/* empty css                     */async function b(e,t={}){var n,a;let i;i="string"==typeof e?e:Array.isArray(e)||"object"==typeof e?JSON.stringify(e).replace(/\s/g,""):String(e);const r=i.length;f.debug(`QR code data size: ${r} characters`);const o=function(e,t=100){let n=t;return e>100&&(n=Math.min(t+20,120)),e>200&&(n=Math.min(t+40,140)),e>300&&(n=Math.min(t+60,160)),e>400&&(n=Math.min(t+80,180)),n}(r);let s="M";r>300?s="L":r<100&&(s="H");const l={width:t.width||o,margin:void 0!==t.margin?t.margin:1,color:{dark:(null==(n=t.color)?void 0:n.dark)||"#000000",light:(null==(a=t.color)?void 0:a.light)||"#FFFFFF"},errorCorrectionLevel:t.errorCorrectionLevel||s};try{return await v.toDataURL(i,l)}catch(d){throw f.error("Failed to generate QR code:",d),new Error(`QR code generation failed: ${d.message}`)}}async function D(e,t={}){if(!e)return b("{}",t.qrOptions||{});let n=e;Array.isArray(e)?e.length>=2&&2===e[0]?(f.debug("[qrService] Using standard PED format"),n=e):(f.debug("[qrService] Using array format"),n=e):"c"===e.f||"compact"===e.format?(f.debug("[qrService] Converting legacy object format to array"),n=e):e.h||e.hasImage?(f.debug("[qrService] Using image reference only"),n=[0]):(f.debug("[qrService] Unknown format:",typeof e),n=e);try{const e=(Array.isArray(n)?JSON.stringify(n):JSON.stringify([3,n])).replace(/\s/g,""),a=e.length;return f.debug("[qrService] Final pedigree data size:",a,"chars"),a>4e3?(f.warn("Pedigree data exceeds limit"),D([0],{qrOptions:t.qrOptions})):b(e,t.qrOptions||{})}catch(a){return f.error("Error generating pedigree QR:",a),b("{}",t.qrOptions||{})}}const S={__name:"PdfGenerator",props:{patientData:{type:Object,required:!0},pedigreeDataUrl:{type:String,required:!1,default:""},phenotypeData:{type:Object,required:!1,default:()=>({})}},setup(v,{expose:S}){const P=t(),{t:F}=t(),x=n((()=>P.locale.value)),z=a(0),N=()=>{z.value++,f.debug(`PdfGenerator: Language updated to ${x.value}, refreshing component`)};i((()=>{window.addEventListener("i18n-updated",N),window.addEventListener("i18n-locale-changed",N)})),r((()=>{window.removeEventListener("i18n-updated",N),window.removeEventListener("i18n-locale-changed",N)}));const w=v,q=o("patientData",null);S({generatePdf:R});const C=n((()=>{const e=(null==q?void 0:q.selectedPanels)||[];return h.categories.map((t=>({categoryTitle:t.title,id:t.id,tests:t.tests.filter((t=>e.includes(t.id)))}))).filter((e=>e.tests.length>0))})),O=n((()=>{const e=(null==q?void 0:q.selectedPanels)||[];if(null==q?void 0:q.personalInfo){const t=q.personalInfo;return{patient:{firstName:t.firstName||"",lastName:t.lastName||"",birthdate:t.birthdate||"",sex:t.sex||"",insurance:t.insurance||"",insuranceId:t.insuranceId||"",referrer:t.referrer||"",diagnosis:t.diagnosis||""},selectedTests:e}}return{patient:{firstName:w.patientData.givenName||"",lastName:w.patientData.familyName||"",birthdate:w.patientData.birthdate||"",sex:w.patientData.sex||"",insurance:w.patientData.insurance||"",insuranceId:w.patientData.insuranceId||"",referrer:w.patientData.referrer||"",diagnosis:w.patientData.clinicalDiagnosis||""},selectedTests:[]}})),I=n((()=>{if(null==q?void 0:q.phenotypes)return q.phenotypes;if(w.phenotypeData){const e=[];return Object.entries(w.phenotypeData).forEach((([t,n])=>{Object.entries(n).forEach((([n,a])=>{if("no input"===a)return;const i=h.categories.find((e=>e.id===t));if(i){const t=i.phenotypes.find((e=>e.id===n));t&&t.hpo&&e.push({id:t.hpo,present:"present"===a||"yes"===a})}}))})),e}return[]})),H=n((()=>{var e,t,n;if(f.debug("[PdfGenerator] Direct patientData props:",JSON.stringify(w.patientData||{})),null==(t=null==(e=w.patientData)?void 0:e.pedigree)?void 0:t.data){const e=w.patientData.pedigree.data;return f.debug("[PdfGenerator] Using pedigree data from props:",JSON.stringify(e)),e}if(null==(n=null==q?void 0:q.pedigree)?void 0:n.data){const e=q.pedigree.data;return f.debug("[PdfGenerator] Using pedigree data from unified model:",JSON.stringify(e)),e}return w.pedigreeDataUrl?(f.debug("[PdfGenerator] No pedigree data available, using hasImage fallback"),{hasImage:!0}):(f.debug("[PdfGenerator] No pedigree data or image URL available"),null)}));function G(e,t){return e.replace(/{{\s*([\w]+)\s*}}/g,((e,n)=>n in t?t[n]:""))}function E(e){return"de"===x.value?"yes"===e?"Ja":"no"===e?"Nein":e:"yes"===e?"Yes":"no"===e?"No":e}function L(e,t,n){t&&t.elements&&t.elements.forEach((t=>{switch(t.type){case"text":!function(e,t,n){let a;a=t.contents&&t.contents[x.value]?G(t.contents[x.value],n):G(t.content,n),t.style&&(e.setFont(t.style.font||"Helvetica",t.style.fontStyle||"normal"),e.setFontSize(t.style.fontSize||12),e.setTextColor(t.style.color||"#000000")),e.text(a,t.position.x,t.position.y)}(e,t,n);break;case"image":!function(e,t,n){const a=G(t.source,n);e.addImage(a,"PNG",t.position.x,t.position.y,t.size.width,t.size.height)}(e,t,n);break;case"rectangle":!function(e,t){const{x:n,y:a}=t.position,{width:i,height:r}=t.size,o=t.style||{};o.fill&&o.fillColor&&e.setFillColor(o.fillColor),o.borderColor&&e.setDrawColor(o.borderColor),e.setLineWidth(o.borderWidth||1);let s="S";o.fill&&o.fillColor&&(s=o.borderWidth?"DF":"F"),e.rect(n,a,i,r,s)}(e,t);break;case"line":!function(e,t){const{x:n,y:a}=t.start,{x:i,y:r}=t.end,o=t.style||{};e.setLineWidth(o.lineWidth||1),o.color&&e.setDrawColor(o.color),e.line(n,a,i,r)}(e,t);break;default:f.debug("Unknown element type:",t.type)}}))}async function R(){var t,n,a,i,r,o,s,l,d;try{f.debug("Starting PDF generation process...");const v=new e({orientation:"portrait",unit:"pt",format:"A4"}),y={givenName:(null==(t=null==q?void 0:q.personalInfo)?void 0:t.firstName)||w.patientData.givenName||"",familyName:(null==(n=null==q?void 0:q.personalInfo)?void 0:n.lastName)||w.patientData.familyName||"",birthdate:(null==(a=null==q?void 0:q.personalInfo)?void 0:a.birthdate)||w.patientData.birthdate||"",sex:(null==(i=null==q?void 0:q.personalInfo)?void 0:i.sex)||w.patientData.sex||"",insurance:(null==(r=null==q?void 0:q.personalInfo)?void 0:r.insurance)||w.patientData.insurance||"",physicianName:(null==(o=null==q?void 0:q.personalInfo)?void 0:o.referrer)||w.patientData.physicianName||"",...w.patientData,...m.header,...m.footer};m.header&&L(v,m.header,y),m.body&&L(v,m.body,y);const{baseY:S=350,maxHeight:P=600,spacing:F=14,offsetX:z=60,secondPageBaseY:N=50}=m.panels||{};let R=S;if(C.value.forEach((e=>{R+F>P&&(v.addPage(),R=N),R=function(e,t,n,a,i){e.setFont("Helvetica","bold"),e.setFontSize(12),e.setTextColor("#000000"),e.text(t,n,a);const r=e.getTextWidth(t);return e.line(n,a+2,n+r,a+2),a+i}(v,e.categoryTitle,z,R,F),e.tests.forEach((e=>{let t=F;if(e.genes&&e.genes.length>0){const n=e.genes.join(", "),a=v.internal.pageSize.getWidth()-z-40;t+=v.splitTextToSize(n,a).length*F}R+t>P&&(v.addPage(),R=N),R=function(e,t,n,a,i){if(e.setFont("Helvetica","bold"),e.setFontSize(12),e.setTextColor("#000000"),e.text(t.name,n,a),a+=i,t.genes&&t.genes.length>0){e.setFont("Helvetica","italic"),e.setFontSize(10),e.setTextColor("#000000");const r=t.genes.join(", "),o=e.internal.pageSize.getWidth()-n-40;e.splitTextToSize(r,o).forEach((t=>{e.text(t,n,a),a+=i}))}return e.setFont("Helvetica","normal"),e.setFontSize(12),a}(v,e,z,R,F)}))})),(null==(s=m.qr)?void 0:s.position)&&(null==(l=m.qr)?void 0:l.size))try{const e={qrOptions:{width:128,margin:2,color:{dark:"#000000",light:"#ffffff"}}},t=await async function(e,t={}){const n=[1,1,[e.firstName||"",e.lastName||"",e.birthdate||"",e.sex||"",e.insurance||"",e.insuranceId||"",e.referrer||"",e.diagnosis||""],t.selectedTests||[]],a=JSON.stringify(n).replace(/\s/g,"");return f.debug("Patient QR data size:",a.length,"characters"),b(a,t.qrOptions||{})}(O.value.patient,{selectedTests:O.value.selectedTests,...e});v.setPage(1),v.setFont("Helvetica","bold"),v.setFontSize(10),v.text("Patient QR Code",m.qr.position.x+m.qr.size.width/2-40,m.qr.position.y-10),v.addImage(t,"PNG",m.qr.position.x,m.qr.position.y,m.qr.size.width,m.qr.size.height)}catch(g){f.debug("Failed to generate or add patient QR code:",g)}try{await async function(e){var t,n;let a={},i=!1;const r=(null==q?void 0:q.phenotypeData)||[];var o;if(r.length>0&&(a=(o=r)&&Array.isArray(o)?o.reduce(((e,t)=>(t&&t.status&&"no input"!==t.status&&(e[t.categoryId]||(e[t.categoryId]={}),e[t.categoryId][t.phenotypeId]=t.status),e)),{}):{},i=Object.values(a).some((e=>Object.values(e).some((e=>"no input"!==e)))),r.length>0&&!i&&f.debug("[PdfGenerator] Unified phenotype data existed but contained only 'no input' entries.")),!i&&w.phenotypeData){f.debug("[PdfGenerator] Checking legacy props.phenotypeData as unified data was empty or lacked meaningful entries."),a=w.phenotypeData;for(const e in a){for(const t in a[e])if("no input"!==a[e][t]){i=!0;break}if(i)break}}if(!i)return void f.debug("[PdfGenerator] Skipping phenotype page: No meaningful data found in unified or legacy sources.");f.debug("[PdfGenerator] Proceeding to render phenotype page."),e.addPage();const s=e.internal.getNumberOfPages();e.setPage(s),e.setFont("Helvetica","bold"),e.setFontSize(16);const l=(null==(n=null==(t=m.phenotypePage)?void 0:t.titleContents)?void 0:n[x.value])||"Phenotype Data";e.text(l,40,40);let d=70;e.setFont("Helvetica","normal"),e.setFontSize(12);try{const t=[];for(const e in a)for(const n in a[e]){const i=a[e][n];if("no input"!==i){const a=h.categories.find((t=>t.id===e));if(a){const r=a.phenotypes.find((e=>e.id===n));if(r&&r.hpo){const e=r.hpo.replace("HP:","");t.push(`${"present"===i?"+":"-"}${e}`)}else f.warn(`Could not find HPO ID for ${e}/${n} for QR code.`)}}}if(t.length>0){f.debug("Generating phenotype QR code with",t.length,"meaningful items");const n=I.value&&I.value.length>0?I.value:t;f.debug(`Using ${n===I.value?"computed":"collected"} phenotype data for QR code with ${n.length} items`);const a=await async function(e,t={}){const n=[1,2,function(e){if(!e||!Array.isArray(e))return f.warn("Invalid phenotype data provided for QR encoding"),[];try{return e.map((e=>{if(!e||!e.id)return f.debug("Skipping phenotype item with no ID"),null;let t;if("string"==typeof e.id&&e.id.startsWith("HP:")){if(t=parseInt(e.id.substring(3),10),isNaN(t))return f.warn(`Invalid HPO ID format: ${e.id}`),null}else t=e.id;return`${e.present?"+":"-"}${t}`})).filter((e=>null!==e))}catch(t){return f.error("Error encoding phenotype data:",t),[]}}(e||[])],a=JSON.stringify(n).replace(/\s/g,"");return f.debug("Phenotype QR data size:",a.length,"characters"),b(a,t.qrOptions||{})}(n,{qrOptions:{width:m.qr.size.width,margin:1,errorCorrectionLevel:"M"}});e.setFont("Helvetica","bold"),e.setFontSize(10),e.text("Phenotype QR Code",m.qr.position.x+m.qr.size.width/2-40,m.qr.position.y-10),e.addImage(a,"PNG",m.qr.position.x,m.qr.position.y,m.qr.size.width,m.qr.size.height)}else f.debug("No meaningful phenotype data available for QR code generation after filtering.")}catch(g){f.debug("Failed to generate or add phenotype QR code:",g)}e.setFontSize(12),e.setFont("Helvetica","normal"),d=70;for(const g in a){const t=h.categories.find((e=>e.id===g));if(!t||!t.phenotypes)continue;const n=t.phenotypes.filter((e=>{var t;return(null==(t=a[g])?void 0:t[e.id])&&"no input"!==a[g][e.id]}));n.length>0&&(e.setFont("Helvetica","bold"),e.text(t.title,40,d),d+=16,e.setFont("Helvetica","normal"),n.forEach((t=>{const n=a[g][t.id],i=`${t.name} (${t.hpo}): ${n}`;e.text(i,40,d),d+=14,d>e.internal.pageSize.getHeight()-40&&(e.addPage(),d=40)})),d+=10)}}(v)}catch(c){f.debug("Error rendering phenotype page:",c)}if(w.pedigreeDataUrl&&""!==w.pedigreeDataUrl){let e=null;if(H.value)try{f.debug("[PdfGenerator] Actual pedigree data being sent to QR generator:",JSON.stringify(H.value));const t=JSON.stringify(H.value).length,n=t>1e3?120:t>500?100:80;H.value?e=await D(H.value,{qrOptions:{width:n,margin:1,errorCorrectionLevel:"M"}}):(f.debug("[PdfGenerator] Invalid pedigree data format:",H.value),e=await D([0],{qrOptions:{width:80,margin:1,errorCorrectionLevel:"M"}})),f.debug("Generated pedigree QR code with PED format data")}catch(g){f.debug("Error generating pedigree QR code:",g);try{e=await D({hasImage:!0},{qrOptions:{width:80,margin:1,errorCorrectionLevel:"M"}}),f.debug("Generated fallback pedigree QR code (image reference only)")}catch(p){f.debug("Error generating fallback pedigree QR code:",p)}}await new Promise((t=>{const n=new Image;n.src=w.pedigreeDataUrl,n.onload=()=>{try{v.addPage();const t=v.internal.getNumberOfPages();v.setPage(t),v.setFont("Helvetica","bold"),v.setFontSize(16),v.text("Family Pedigree",40,40);const a=v.internal.pageSize.getWidth(),i=v.internal.pageSize.getHeight(),r=40,o=a-2*r,s=i-2*r-40,l=Math.min(o/n.width,s/n.height,1),d=n.width*l,g=n.height*l,c=(a-d)/2,p=80;v.addImage(w.pedigreeDataUrl,"PNG",c,p,d,g),e&&(v.setFont("Helvetica","bold"),v.setFontSize(10),v.text("Pedigree QR Code",m.qr.position.x+m.qr.size.width/2-40,m.qr.position.y-10),v.addImage(e,"PNG",m.qr.position.x,m.qr.position.y,m.qr.size.width,m.qr.size.height))}catch(a){f.debug("Error rendering pedigree:",a)}t()},n.onerror=()=>{f.debug("Error loading pedigree image."),t()}}))}const $=(null==(d=null==q?void 0:q.consent)?void 0:d.dataProcessing)||w.patientData.genDGConsentData&&"fill"===w.patientData.genDGConsentData.provided;if(f.debug("generatePdf in PdfGenerator: Checking consent data availability:",$),$){f.debug("Attempting to render consent page...");try{!function(e){f.debug("Rendering consent page...");try{if(!w.patientData.genDGConsentData||!w.patientData.genDGConsentData.form)return void f.debug("Consent form data is missing in PdfGenerator");const t=w.patientData.genDGConsentData.form,n=m.consent;f.debug("Consent Form Data:",JSON.stringify(t)),f.debug("Consent Config:",JSON.stringify(n));const a={consentName:t.consentName||"",zufallsbefundeLabel:E(t.questionSecondaryFindings),materialLabel:E(t.questionMaterial),extendedLabel:E(t.questionExtended),researchLabel:E(t.questionResearch)};e.addPage(),e.setFont("Helvetica","normal"),e.setFontSize(10);let i=n.startY||40;const r=40,o=40,s=e.internal.pageSize.getWidth()-r-o,l=n.lineSpacing||5,d=n.paragraphSpacing||10;if(n.title){e.setFont("Helvetica","bold"),e.setFontSize(n.title.fontSize||14);let t=n.title;n.titleContents&&n.titleContents[x.value]&&(t=n.titleContents[x.value],f.debug(`Using localized title for ${x.value}`)),e.splitTextToSize(t,s).forEach((t=>{e.text(t,r,i),i+=.5*(n.title.fontSize||14)})),i+=l,e.setFont("Helvetica","normal"),e.setFontSize(10)}f.debug("Rendering paragraphs...");let g=n.paragraphs;n.paragraphsContents&&n.paragraphsContents[x.value]&&(g=n.paragraphsContents[x.value],f.debug(`Using localized paragraphs for ${x.value}`)),g.forEach((t=>{const o=G(t,a);e.splitTextToSize(o,s).forEach((t=>{i+l>e.internal.pageSize.getHeight()-60&&(e.addPage(),i=n.startY||40),e.text(t,r,i),i+=1.2*e.getFontSize()})),i+=d}));let c=i+(n.signatureArea.marginTop||20);const p=n.signatureArea.lineStartX||r,u=n.signatureArea.patientLineEndX||p+200,h=n.signatureArea.physicianLineStartX||r+250,v=n.signatureArea.physicianLineEndX||h+200;let y=n.signatureArea;n.signatureAreaContents&&n.signatureAreaContents[x.value]&&(y=n.signatureAreaContents[x.value],f.debug(`Using localized signature area for ${x.value}`));const b=`${"en"===x.value?"Date":"Datum"}: ${t.consentDate||"___________"}`;e.text(b,p,c),c+=1.4*e.getFontSize();const D=c;e.line(p,D,u,D),y.patientLabel&&e.text(y.patientLabel,p,D+1.2*e.getFontSize());const S=c;e.line(h,S,v,S),y.physicianLabel&&e.text(y.physicianLabel,h,S+1.2*e.getFontSize());const P=Math.max(D,S)+2.4*e.getFontSize();y.signHint&&e.text(y.signHint,p,P),f.debug("Finished rendering consent page content.")}catch(t){f.debug("Error during renderConsentPage:",t)}}(v)}catch(u){f.debug("Caught error during renderConsentPage call:",u)}}const T=v.internal.getNumberOfPages();if(m.pageNumber&&m.pageNumber.enabled)for(let e=1;e<=T;e++){v.setPage(e);const{x:t,y:n}=m.pageNumber.position,a=`Page ${e} of ${T}`;v.setFont(m.pageNumber.font||"Helvetica",m.pageNumber.fontStyle||"normal"),v.setFontSize(m.pageNumber.fontSize||10),v.setTextColor(m.pageNumber.color||"#000000"),v.text(a,t,n)}const k=`PDF Schema: v${m.schema.version} | Test Schema: v${h.schema.version}`;for(let e=1;e<=T;e++)v.setPage(e),v.setFont("Helvetica","normal"),v.setFontSize(8),v.setTextColor("#000000"),v.text(k,40,v.internal.pageSize.getHeight()-10);v.save("genetic_test_requisition.pdf"),f.debug("PDF generation process completed.")}catch(v){f.debug("Error during PDF generation process:",v),alert("An error occurred while generating the PDF. Please check the console for details.")}}return(e,t)=>(l(),s("div",null,[(l(),d(y,{onClick:R,color:"primary",dark:"",key:`pdf-btn-${z.value}`},{default:g((()=>[c(p(u(F)("pdfGenerator.generateButton","Generate PDF")),1)])),_:1}))]))}};export{S as default};
